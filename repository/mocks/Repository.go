// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "khaira-admin/domain"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, tx, entity
func (_m *Repository) AddProduct(ctx context.Context, tx *sql.Tx, entity *domain.Domain) (*domain.Domain, error) {
	ret := _m.Called(ctx, tx, entity)

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 *domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Domain) (*domain.Domain, error)); ok {
		return rf(ctx, tx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Domain) *domain.Domain); ok {
		r0 = rf(ctx, tx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *domain.Domain) error); ok {
		r1 = rf(ctx, tx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrder provides a mock function with given fields: ctx, tx, id
func (_m *Repository) DeleteOrder(ctx context.Context, tx *sql.Tx, id string) error {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: ctx, tx, id
func (_m *Repository) DeleteProduct(ctx context.Context, tx *sql.Tx, id string) error {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrders provides a mock function with given fields: ctx, db
func (_m *Repository) GetOrders(ctx context.Context, db *sql.DB) ([]*domain.Orders, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []*domain.Orders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.DB) ([]*domain.Orders, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.DB) []*domain.Orders); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Orders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.DB) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx, db
func (_m *Repository) GetProducts(ctx context.Context, db *sql.DB) ([]*domain.Domain, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []*domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.DB) ([]*domain.Domain, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.DB) []*domain.Domain); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.DB) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, db, entity
func (_m *Repository) Login(ctx context.Context, db *sql.DB, entity *domain.Admin) (*domain.Admin, error) {
	ret := _m.Called(ctx, db, entity)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.DB, *domain.Admin) (*domain.Admin, error)); ok {
		return rf(ctx, db, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.DB, *domain.Admin) *domain.Admin); ok {
		r0 = rf(ctx, db, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.DB, *domain.Admin) error); ok {
		r1 = rf(ctx, db, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, tx, entity, id
func (_m *Repository) UpdateOrder(ctx context.Context, tx *sql.Tx, entity *domain.Orders, id string) error {
	ret := _m.Called(ctx, tx, entity, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Orders, string) error); ok {
		r0 = rf(ctx, tx, entity, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: ctx, tx, entity, id
func (_m *Repository) UpdateProduct(ctx context.Context, tx *sql.Tx, entity *domain.Domain, id string) (*domain.Domain, error) {
	ret := _m.Called(ctx, tx, entity, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Domain, string) (*domain.Domain, error)); ok {
		return rf(ctx, tx, entity, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Domain, string) *domain.Domain); ok {
		r0 = rf(ctx, tx, entity, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *domain.Domain, string) error); ok {
		r1 = rf(ctx, tx, entity, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
